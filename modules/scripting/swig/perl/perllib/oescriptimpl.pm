# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package oescriptimpl;
use base qw(Exporter);
use base qw(DynaLoader);
package oescriptimplc;
bootstrap oescriptimpl;
package oescriptimpl;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package oescriptimpl;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package oescriptimpl;


############# Class : oescriptimpl::OesDataObject ##############

package oescriptimpl::OesDataObject;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesDataObject(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesDataObject($self);
        delete $OWNER{$self};
    }
}

*get_nattrs = *oescriptimplc::OesDataObject_get_nattrs;
*add_attr = *oescriptimplc::OesDataObject_add_attr;
*set_nbytes = *oescriptimplc::OesDataObject_set_nbytes;
*get_nbytes = *oescriptimplc::OesDataObject_get_nbytes;
*iter = *oescriptimplc::OesDataObject_iter;
*set_bytes = *oescriptimplc::OesDataObject_set_bytes;
*get_bytes = *oescriptimplc::OesDataObject_get_bytes;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesSigHandler ##############

package oescriptimpl::OesSigHandler;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesSigHandler(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesSigHandler($self);
        delete $OWNER{$self};
    }
}

*add = *oescriptimplc::OesSigHandler_add;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesDispatcher ##############

package oescriptimpl::OesDispatcher;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesDispatcher(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesDispatcher($self);
        delete $OWNER{$self};
    }
}

*start = *oescriptimplc::OesDispatcher_start;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesThreadDispatcher ##############

package oescriptimpl::OesThreadDispatcher;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesThreadDispatcher(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesThreadDispatcher($self);
        delete $OWNER{$self};
    }
}

*start = *oescriptimplc::OesThreadDispatcher_start;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesStore ##############

package oescriptimpl::OesStore;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesStore(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesStore($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesNet ##############

package oescriptimpl::OesNet;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesNet(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesNet($self);
        delete $OWNER{$self};
    }
}

*setName = *oescriptimplc::OesNet_setName;
*getName = *oescriptimplc::OesNet_getName;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesLoginModule ##############

package oescriptimpl::OesLoginModule;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesLoginModule($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesLoginModule(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesBuiltInLoginModule ##############

package oescriptimpl::OesBuiltInLoginModule;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesBuiltInLoginModule(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesBuiltInLoginModule($self);
        delete $OWNER{$self};
    }
}

*addAccount = *oescriptimplc::OesBuiltInLoginModule_addAccount;
*addPrivilege = *oescriptimplc::OesBuiltInLoginModule_addPrivilege;
*getModule = *oescriptimplc::OesBuiltInLoginModule_getModule;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesPamLoginModule ##############

package oescriptimpl::OesPamLoginModule;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesPamLoginModule(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesPamLoginModule($self);
        delete $OWNER{$self};
    }
}

*addPrivilege = *oescriptimplc::OesPamLoginModule_addPrivilege;
*getModule = *oescriptimplc::OesPamLoginModule_getModule;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesServer ##############

package oescriptimpl::OesServer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesServer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesServer($self);
        delete $OWNER{$self};
    }
}

*addLoginModule = *oescriptimplc::OesServer_addLoginModule;
*addKernel = *oescriptimplc::OesServer_addKernel;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesDataObjectList ##############

package oescriptimpl::OesDataObjectList;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesDataObjectList(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesDataObjectList($self);
        delete $OWNER{$self};
    }
}

*length = *oescriptimplc::OesDataObjectList_length;
*iter = *oescriptimplc::OesDataObjectList_iter;
*newDataObject = *oescriptimplc::OesDataObjectList_newDataObject;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesIterator ##############

package oescriptimpl::OesIterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesIterator($self);
        delete $OWNER{$self};
    }
}

*nextItem = *oescriptimplc::OesIterator_nextItem;
*hasMore = *oescriptimplc::OesIterator_hasMore;
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesIterator(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesListIterator ##############

package oescriptimpl::OesListIterator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesListIterator($self);
        delete $OWNER{$self};
    }
}

*nextItem = *oescriptimplc::OesListIterator_nextItem;
*hasMore = *oescriptimplc::OesListIterator_hasMore;
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesListIterator(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesLease ##############

package oescriptimpl::OesLease;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesLease($self);
        delete $OWNER{$self};
    }
}

*lid = *oescriptimplc::OesLease_lid;
*cancel = *oescriptimplc::OesLease_cancel;
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesLease(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesTxn ##############

package oescriptimpl::OesTxn;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesTxn($self);
        delete $OWNER{$self};
    }
}

*tid = *oescriptimplc::OesTxn_tid;
*status = *oescriptimplc::OesTxn_status;
*commit = *oescriptimplc::OesTxn_commit;
*rollback = *oescriptimplc::OesTxn_rollback;
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesTxn(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesKernel ##############

package oescriptimpl::OesKernel;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesKernel(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesKernel($self);
        delete $OWNER{$self};
    }
}

*write = *oescriptimplc::OesKernel_write;
*begin = *oescriptimplc::OesKernel_begin;
*setCurrent = *oescriptimplc::OesKernel_setCurrent;
*read = *oescriptimplc::OesKernel_read;
*take = *oescriptimplc::OesKernel_take;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesJsonKernel ##############

package oescriptimpl::OesJsonKernel;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesJsonKernel(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesJsonKernel($self);
        delete $OWNER{$self};
    }
}

*exec = *oescriptimplc::OesJsonKernel_exec;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : oescriptimpl::OesFuture ##############

package oescriptimpl::OesFuture;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( oescriptimpl );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        oescriptimplc::delete_OesFuture($self);
        delete $OWNER{$self};
    }
}

*getString = *oescriptimplc::OesFuture_getString;
sub new {
    my $pkg = shift;
    my $self = oescriptimplc::new_OesFuture(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package oescriptimpl;

*CSTRING_I_SUPPORTED = *oescriptimplc::CSTRING_I_SUPPORTED;
*ACTIVE = *oescriptimplc::ACTIVE;
*ROLLEDBACK = *oescriptimplc::ROLLEDBACK;
*COMMITTED = *oescriptimplc::COMMITTED;
1;
